// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.login.di;

import android.content.Context;
import android.content.SharedPreferences;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.core.TimeoutHttpTransport;
import ru.bashmag.khakimulin.reportmonitor.core.di.AppComponent;
import ru.bashmag.khakimulin.reportmonitor.db.DB;
import ru.bashmag.khakimulin.reportmonitor.screens.login.LoginActivity;
import ru.bashmag.khakimulin.reportmonitor.screens.login.LoginActivity_MembersInjector;
import ru.bashmag.khakimulin.reportmonitor.screens.login.mvp.LoginModel;
import ru.bashmag.khakimulin.reportmonitor.screens.login.mvp.LoginPresenter;
import ru.bashmag.khakimulin.reportmonitor.utils.rx.RxSchedulers;
import rx.subscriptions.CompositeSubscription;

public final class DaggerLoginComponent implements LoginComponent {
  private Provider<DB> provideDBProvider;

  private Provider<RxSchedulers> provideRxSchedulersProvider;

  private Provider<TimeoutHttpTransport> provideHttpTransportProvider;

  private Provider<SoapSerializationEnvelope> provideSoapSerializationEnvelopeProvider;

  private Provider<Context> provideContextProvider;

  private Provider<LoginModel> provideSplashModelProvider;

  private Provider<CompositeSubscription> provideCompositeSubscriptionProvider;

  private Provider<BasePresenter> provideBasePresenterProvider;

  private Provider<SharedPreferences> provideSharedPreferenceProvider;

  private Provider<LoginPresenter> providePresenterProvider;

  private MembersInjector<LoginActivity> loginActivityMembersInjector;

  private DaggerLoginComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideDBProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideDB(
            builder.appComponent);

    this.provideRxSchedulersProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers(
            builder.appComponent);

    this.provideHttpTransportProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideHttpTransport(
            builder.appComponent);

    this.provideSoapSerializationEnvelopeProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSoapSerializationEnvelope(
            builder.appComponent);

    this.provideContextProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideContext(
            builder.appComponent);

    this.provideSplashModelProvider =
        DoubleCheck.provider(
            LoginModule_ProvideSplashModelFactory.create(
                builder.loginModule,
                provideDBProvider,
                provideHttpTransportProvider,
                provideSoapSerializationEnvelopeProvider,
                provideContextProvider));

    this.provideCompositeSubscriptionProvider =
        DoubleCheck.provider(
            LoginModule_ProvideCompositeSubscriptionFactory.create(builder.loginModule));

    this.provideBasePresenterProvider =
        DoubleCheck.provider(
            LoginModule_ProvideBasePresenterFactory.create(
                builder.loginModule,
                provideDBProvider,
                provideRxSchedulersProvider,
                provideSplashModelProvider,
                provideCompositeSubscriptionProvider));

    this.provideSharedPreferenceProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference(
            builder.appComponent);

    this.providePresenterProvider =
        DoubleCheck.provider(LoginModule_ProvidePresenterFactory.create(builder.loginModule));

    this.loginActivityMembersInjector =
        LoginActivity_MembersInjector.create(
            provideBasePresenterProvider,
            provideCompositeSubscriptionProvider,
            provideSharedPreferenceProvider,
            providePresenterProvider);
  }

  @Override
  public void inject(LoginActivity activity) {
    loginActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private LoginModule loginModule;

    private AppComponent appComponent;

    private Builder() {}

    public LoginComponent build() {
      if (loginModule == null) {
        throw new IllegalStateException(LoginModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerLoginComponent(this);
    }

    public Builder loginModule(LoginModule loginModule) {
      this.loginModule = Preconditions.checkNotNull(loginModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideDB
      implements Provider<DB> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideDB(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public DB get() {
      return Preconditions.checkNotNull(
          appComponent.provideDB(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers
      implements Provider<RxSchedulers> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RxSchedulers get() {
      return Preconditions.checkNotNull(
          appComponent.provideRxSchedulers(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideHttpTransport
      implements Provider<TimeoutHttpTransport> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideHttpTransport(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public TimeoutHttpTransport get() {
      return Preconditions.checkNotNull(
          appComponent.provideHttpTransport(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static
  class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSoapSerializationEnvelope
      implements Provider<SoapSerializationEnvelope> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSoapSerializationEnvelope(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public SoapSerializationEnvelope get() {
      return Preconditions.checkNotNull(
          appComponent.provideSoapSerializationEnvelope(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideContext
      implements Provider<Context> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideContext(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          appComponent.provideContext(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static
  class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference
      implements Provider<SharedPreferences> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public SharedPreferences get() {
      return Preconditions.checkNotNull(
          appComponent.provideSharedPreference(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
