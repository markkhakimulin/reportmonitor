// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reports.conversion.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import ru.bashmag.khakimulin.reportmonitor.core.TimeoutHttpTransport;
import ru.bashmag.khakimulin.reportmonitor.db.DB;
import ru.bashmag.khakimulin.reportmonitor.screens.reports.conversion.mvp.ConversionModel;

public final class ConversionModule_ProvideSplashModelFactory implements Factory<ConversionModel> {
  private final ConversionModule module;

  private final Provider<DB> dbProvider;

  private final Provider<TimeoutHttpTransport> httpTransportSEProvider;

  private final Provider<SoapSerializationEnvelope> envelopeProvider;

  public ConversionModule_ProvideSplashModelFactory(
      ConversionModule module,
      Provider<DB> dbProvider,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider) {
    assert module != null;
    this.module = module;
    assert dbProvider != null;
    this.dbProvider = dbProvider;
    assert httpTransportSEProvider != null;
    this.httpTransportSEProvider = httpTransportSEProvider;
    assert envelopeProvider != null;
    this.envelopeProvider = envelopeProvider;
  }

  @Override
  public ConversionModel get() {
    return Preconditions.checkNotNull(
        module.provideSplashModel(
            dbProvider.get(), httpTransportSEProvider.get(), envelopeProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<ConversionModel> create(
      ConversionModule module,
      Provider<DB> dbProvider,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider) {
    return new ConversionModule_ProvideSplashModelFactory(
        module, dbProvider, httpTransportSEProvider, envelopeProvider);
  }

  /**
   * Proxies {@link ConversionModule#provideSplashModel(DB, TimeoutHttpTransport,
   * SoapSerializationEnvelope)}.
   */
  public static ConversionModel proxyProvideSplashModel(
      ConversionModule instance,
      DB db,
      TimeoutHttpTransport httpTransportSE,
      SoapSerializationEnvelope envelope) {
    return instance.provideSplashModel(db, httpTransportSE, envelope);
  }
}
