// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reportlist.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.mvp.ReportListModel;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.mvp.ReportListPresenter;
import ru.bashmag.khakimulin.reportmonitor.utils.rx.RxSchedulers;
import rx.subscriptions.CompositeSubscription;

public final class ReportListModule_ProvidePresenterFactory
    implements Factory<ReportListPresenter> {
  private final ReportListModule module;

  private final Provider<RxSchedulers> schedulersProvider;

  private final Provider<ReportListModel> modelProvider;

  private final Provider<CompositeSubscription> subscriptionProvider;

  public ReportListModule_ProvidePresenterFactory(
      ReportListModule module,
      Provider<RxSchedulers> schedulersProvider,
      Provider<ReportListModel> modelProvider,
      Provider<CompositeSubscription> subscriptionProvider) {
    assert module != null;
    this.module = module;
    assert schedulersProvider != null;
    this.schedulersProvider = schedulersProvider;
    assert modelProvider != null;
    this.modelProvider = modelProvider;
    assert subscriptionProvider != null;
    this.subscriptionProvider = subscriptionProvider;
  }

  @Override
  public ReportListPresenter get() {
    return Preconditions.checkNotNull(
        module.providePresenter(
            schedulersProvider.get(), modelProvider.get(), subscriptionProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<ReportListPresenter> create(
      ReportListModule module,
      Provider<RxSchedulers> schedulersProvider,
      Provider<ReportListModel> modelProvider,
      Provider<CompositeSubscription> subscriptionProvider) {
    return new ReportListModule_ProvidePresenterFactory(
        module, schedulersProvider, modelProvider, subscriptionProvider);
  }

  /**
   * Proxies {@link ReportListModule#providePresenter(RxSchedulers, ReportListModel,
   * CompositeSubscription)}.
   */
  public static ReportListPresenter proxyProvidePresenter(
      ReportListModule instance,
      RxSchedulers schedulers,
      ReportListModel model,
      CompositeSubscription subscription) {
    return instance.providePresenter(schedulers, model, subscription);
  }
}
