// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.splash.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import ru.bashmag.khakimulin.reportmonitor.core.TimeoutHttpTransport;
import ru.bashmag.khakimulin.reportmonitor.db.DB;
import ru.bashmag.khakimulin.reportmonitor.screens.splash.mvp.SplashModel;

public final class SplashModule_ProvideSplashModelFactory implements Factory<SplashModel> {
  private final SplashModule module;

  private final Provider<DB> dbProvider;

  private final Provider<TimeoutHttpTransport> httpTransportSEProvider;

  private final Provider<SoapSerializationEnvelope> envelopeProvider;

  private final Provider<Context> ctxProvider;

  public SplashModule_ProvideSplashModelFactory(
      SplashModule module,
      Provider<DB> dbProvider,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider,
      Provider<Context> ctxProvider) {
    assert module != null;
    this.module = module;
    assert dbProvider != null;
    this.dbProvider = dbProvider;
    assert httpTransportSEProvider != null;
    this.httpTransportSEProvider = httpTransportSEProvider;
    assert envelopeProvider != null;
    this.envelopeProvider = envelopeProvider;
    assert ctxProvider != null;
    this.ctxProvider = ctxProvider;
  }

  @Override
  public SplashModel get() {
    return Preconditions.checkNotNull(
        module.provideSplashModel(
            dbProvider.get(),
            httpTransportSEProvider.get(),
            envelopeProvider.get(),
            ctxProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<SplashModel> create(
      SplashModule module,
      Provider<DB> dbProvider,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider,
      Provider<Context> ctxProvider) {
    return new SplashModule_ProvideSplashModelFactory(
        module, dbProvider, httpTransportSEProvider, envelopeProvider, ctxProvider);
  }

  /**
   * Proxies {@link SplashModule#provideSplashModel(DB, TimeoutHttpTransport,
   * SoapSerializationEnvelope, Context)}.
   */
  public static SplashModel proxyProvideSplashModel(
      SplashModule instance,
      DB db,
      TimeoutHttpTransport httpTransportSE,
      SoapSerializationEnvelope envelope,
      Context ctx) {
    return instance.provideSplashModel(db, httpTransportSE, envelope, ctx);
  }
}
