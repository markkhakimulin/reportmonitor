// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reports.conversion;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import dagger.MembersInjector;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.core.BaseActivity;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.screens.reports.conversion.mvp.ConversionPresenter;
import rx.subscriptions.CompositeSubscription;

public final class ConversionReportActivity_MembersInjector
    implements MembersInjector<ConversionReportActivity> {
  private final Provider<BasePresenter> presenterProvider;

  private final Provider<CompositeSubscription> subscriptionsProvider;

  private final Provider<SharedPreferences> preferencesAndSpProvider;

  private final Provider<Context> contextProvider;

  private final Provider<ConversionPresenter> conversionPresenterProvider;

  private final Provider<Resources> rsProvider;

  public ConversionReportActivity_MembersInjector(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> preferencesAndSpProvider,
      Provider<Context> contextProvider,
      Provider<ConversionPresenter> conversionPresenterProvider,
      Provider<Resources> rsProvider) {
    assert presenterProvider != null;
    this.presenterProvider = presenterProvider;
    assert subscriptionsProvider != null;
    this.subscriptionsProvider = subscriptionsProvider;
    assert preferencesAndSpProvider != null;
    this.preferencesAndSpProvider = preferencesAndSpProvider;
    assert contextProvider != null;
    this.contextProvider = contextProvider;
    assert conversionPresenterProvider != null;
    this.conversionPresenterProvider = conversionPresenterProvider;
    assert rsProvider != null;
    this.rsProvider = rsProvider;
  }

  public static MembersInjector<ConversionReportActivity> create(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> preferencesAndSpProvider,
      Provider<Context> contextProvider,
      Provider<ConversionPresenter> conversionPresenterProvider,
      Provider<Resources> rsProvider) {
    return new ConversionReportActivity_MembersInjector(
        presenterProvider,
        subscriptionsProvider,
        preferencesAndSpProvider,
        contextProvider,
        conversionPresenterProvider,
        rsProvider);
  }

  @Override
  public void injectMembers(ConversionReportActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    ((BaseActivity) instance).presenter = presenterProvider.get();
    ((BaseActivity) instance).subscriptions = subscriptionsProvider.get();
    ((BaseActivity) instance).sp = preferencesAndSpProvider.get();
    instance.context = contextProvider.get();
    instance.conversionPresenter = conversionPresenterProvider.get();
    instance.preferences = preferencesAndSpProvider.get();
    instance.rs = rsProvider.get();
  }

  public static void injectContext(
      ConversionReportActivity instance, Provider<Context> contextProvider) {
    instance.context = contextProvider.get();
  }

  public static void injectPreferences(
      ConversionReportActivity instance, Provider<SharedPreferences> preferencesProvider) {
    instance.preferences = preferencesProvider.get();
  }

  public static void injectRs(ConversionReportActivity instance, Provider<Resources> rsProvider) {
    instance.rs = rsProvider.get();
  }
}
