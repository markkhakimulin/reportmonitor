// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.login.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import rx.subscriptions.CompositeSubscription;

public final class LoginModule_ProvideCompositeSubscriptionFactory
    implements Factory<CompositeSubscription> {
  private final LoginModule module;

  public LoginModule_ProvideCompositeSubscriptionFactory(LoginModule module) {
    assert module != null;
    this.module = module;
  }

  @Override
  public CompositeSubscription get() {
    return Preconditions.checkNotNull(
        module.provideCompositeSubscription(),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<CompositeSubscription> create(LoginModule module) {
    return new LoginModule_ProvideCompositeSubscriptionFactory(module);
  }

  /** Proxies {@link LoginModule#provideCompositeSubscription()}. */
  public static CompositeSubscription proxyProvideCompositeSubscription(LoginModule instance) {
    return instance.provideCompositeSubscription();
  }
}
