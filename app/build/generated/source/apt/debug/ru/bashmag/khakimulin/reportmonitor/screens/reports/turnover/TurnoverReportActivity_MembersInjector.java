// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reports.turnover;

import android.content.SharedPreferences;
import android.content.res.Resources;
import dagger.MembersInjector;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.core.BaseActivity;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.screens.reports.turnover.mvp.TurnoverPresenter;
import rx.subscriptions.CompositeSubscription;

public final class TurnoverReportActivity_MembersInjector
    implements MembersInjector<TurnoverReportActivity> {
  private final Provider<BasePresenter> presenterProvider;

  private final Provider<CompositeSubscription> subscriptionsProvider;

  private final Provider<SharedPreferences> spProvider;

  private final Provider<TurnoverPresenter> turnoverPresenterProvider;

  private final Provider<Resources> rsProvider;

  public TurnoverReportActivity_MembersInjector(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<TurnoverPresenter> turnoverPresenterProvider,
      Provider<Resources> rsProvider) {
    assert presenterProvider != null;
    this.presenterProvider = presenterProvider;
    assert subscriptionsProvider != null;
    this.subscriptionsProvider = subscriptionsProvider;
    assert spProvider != null;
    this.spProvider = spProvider;
    assert turnoverPresenterProvider != null;
    this.turnoverPresenterProvider = turnoverPresenterProvider;
    assert rsProvider != null;
    this.rsProvider = rsProvider;
  }

  public static MembersInjector<TurnoverReportActivity> create(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<TurnoverPresenter> turnoverPresenterProvider,
      Provider<Resources> rsProvider) {
    return new TurnoverReportActivity_MembersInjector(
        presenterProvider,
        subscriptionsProvider,
        spProvider,
        turnoverPresenterProvider,
        rsProvider);
  }

  @Override
  public void injectMembers(TurnoverReportActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    ((BaseActivity) instance).presenter = presenterProvider.get();
    ((BaseActivity) instance).subscriptions = subscriptionsProvider.get();
    ((BaseActivity) instance).sp = spProvider.get();
    instance.turnoverPresenter = turnoverPresenterProvider.get();
    instance.rs = rsProvider.get();
  }

  public static void injectTurnoverPresenter(
      TurnoverReportActivity instance, Provider<TurnoverPresenter> turnoverPresenterProvider) {
    instance.turnoverPresenter = turnoverPresenterProvider.get();
  }

  public static void injectRs(TurnoverReportActivity instance, Provider<Resources> rsProvider) {
    instance.rs = rsProvider.get();
  }
}
