// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.login;

import android.content.SharedPreferences;
import dagger.MembersInjector;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.core.BaseActivity;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.screens.login.mvp.LoginPresenter;
import rx.subscriptions.CompositeSubscription;

public final class LoginActivity_MembersInjector implements MembersInjector<LoginActivity> {
  private final Provider<BasePresenter> presenterProvider;

  private final Provider<CompositeSubscription> subscriptionsProvider;

  private final Provider<SharedPreferences> spProvider;

  private final Provider<LoginPresenter> loginPresenterProvider;

  public LoginActivity_MembersInjector(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<LoginPresenter> loginPresenterProvider) {
    assert presenterProvider != null;
    this.presenterProvider = presenterProvider;
    assert subscriptionsProvider != null;
    this.subscriptionsProvider = subscriptionsProvider;
    assert spProvider != null;
    this.spProvider = spProvider;
    assert loginPresenterProvider != null;
    this.loginPresenterProvider = loginPresenterProvider;
  }

  public static MembersInjector<LoginActivity> create(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<LoginPresenter> loginPresenterProvider) {
    return new LoginActivity_MembersInjector(
        presenterProvider, subscriptionsProvider, spProvider, loginPresenterProvider);
  }

  @Override
  public void injectMembers(LoginActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    ((BaseActivity) instance).presenter = presenterProvider.get();
    ((BaseActivity) instance).subscriptions = subscriptionsProvider.get();
    ((BaseActivity) instance).sp = spProvider.get();
    instance.loginPresenter = loginPresenterProvider.get();
  }

  public static void injectLoginPresenter(
      LoginActivity instance, Provider<LoginPresenter> loginPresenterProvider) {
    instance.loginPresenter = loginPresenterProvider.get();
  }
}
