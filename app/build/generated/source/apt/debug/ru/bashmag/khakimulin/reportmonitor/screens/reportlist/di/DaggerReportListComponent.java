// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reportlist.di;

import android.content.SharedPreferences;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.core.di.AppComponent;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.ReportListActivity;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.ReportListActivity_MembersInjector;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.mvp.ReportListModel;
import ru.bashmag.khakimulin.reportmonitor.screens.reportlist.mvp.ReportListPresenter;
import ru.bashmag.khakimulin.reportmonitor.utils.rx.RxSchedulers;
import rx.subscriptions.CompositeSubscription;

public final class DaggerReportListComponent implements ReportListComponent {
  private Provider<BasePresenter> provideBasePresenterProvider;

  private Provider<CompositeSubscription> provideCompositeSubscriptionProvider;

  private Provider<SharedPreferences> provideSharedPreferenceProvider;

  private Provider<RxSchedulers> provideRxSchedulersProvider;

  private Provider<ReportListModel> provideModelProvider;

  private Provider<ReportListPresenter> providePresenterProvider;

  private MembersInjector<ReportListActivity> reportListActivityMembersInjector;

  private DaggerReportListComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideBasePresenterProvider =
        DoubleCheck.provider(
            ReportListModule_ProvideBasePresenterFactory.create(builder.reportListModule));

    this.provideCompositeSubscriptionProvider =
        DoubleCheck.provider(
            ReportListModule_ProvideCompositeSubscriptionFactory.create(builder.reportListModule));

    this.provideSharedPreferenceProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference(
            builder.appComponent);

    this.provideRxSchedulersProvider =
        new ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers(
            builder.appComponent);

    this.provideModelProvider =
        DoubleCheck.provider(ReportListModule_ProvideModelFactory.create(builder.reportListModule));

    this.providePresenterProvider =
        DoubleCheck.provider(
            ReportListModule_ProvidePresenterFactory.create(
                builder.reportListModule,
                provideRxSchedulersProvider,
                provideModelProvider,
                provideCompositeSubscriptionProvider));

    this.reportListActivityMembersInjector =
        ReportListActivity_MembersInjector.create(
            provideBasePresenterProvider,
            provideCompositeSubscriptionProvider,
            provideSharedPreferenceProvider,
            providePresenterProvider);
  }

  @Override
  public void inject(ReportListActivity reportListActivity) {
    reportListActivityMembersInjector.injectMembers(reportListActivity);
  }

  public static final class Builder {
    private ReportListModule reportListModule;

    private AppComponent appComponent;

    private Builder() {}

    public ReportListComponent build() {
      if (reportListModule == null) {
        throw new IllegalStateException(ReportListModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerReportListComponent(this);
    }

    public Builder reportListModule(ReportListModule reportListModule) {
      this.reportListModule = Preconditions.checkNotNull(reportListModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static
  class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference
      implements Provider<SharedPreferences> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideSharedPreference(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public SharedPreferences get() {
      return Preconditions.checkNotNull(
          appComponent.provideSharedPreference(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers
      implements Provider<RxSchedulers> {
    private final AppComponent appComponent;

    ru_bashmag_khakimulin_reportmonitor_core_di_AppComponent_provideRxSchedulers(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RxSchedulers get() {
      return Preconditions.checkNotNull(
          appComponent.provideRxSchedulers(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
