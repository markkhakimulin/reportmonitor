// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.core.di;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import ru.bashmag.khakimulin.reportmonitor.core.TimeoutHttpTransport;
import ru.bashmag.khakimulin.reportmonitor.db.DB;
import ru.bashmag.khakimulin.reportmonitor.utils.rx.RxSchedulers;

public final class DaggerAppComponent implements AppComponent {
  private Provider<TimeoutHttpTransport> provideHttpTransportSEProvider;

  private Provider<DB> provideDBHelperProvider;

  private Provider<Resources> provideResourcesProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<Context> provideContextProvider;

  private Provider<RxSchedulers> provideRxSchedulersProvider;

  private Provider<SoapSerializationEnvelope> provideSoapSerializationEnvelopeProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideHttpTransportSEProvider =
        DoubleCheck.provider(AppModule_ProvideHttpTransportSEFactory.create(builder.appModule));

    this.provideDBHelperProvider =
        DoubleCheck.provider(AppModule_ProvideDBHelperFactory.create(builder.appModule));

    this.provideResourcesProvider =
        DoubleCheck.provider(AppModule_ProvideResourcesFactory.create(builder.appModule));

    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(AppModule_ProvideSharedPreferencesFactory.create(builder.appModule));

    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));

    this.provideRxSchedulersProvider =
        DoubleCheck.provider(AppModule_ProvideRxSchedulersFactory.create(builder.appModule));

    this.provideSoapSerializationEnvelopeProvider =
        DoubleCheck.provider(
            AppModule_ProvideSoapSerializationEnvelopeFactory.create(builder.appModule));
  }

  @Override
  public TimeoutHttpTransport provideHttpTransport() {
    return provideHttpTransportSEProvider.get();
  }

  @Override
  public DB provideDB() {
    return provideDBHelperProvider.get();
  }

  @Override
  public Resources provideResources() {
    return provideResourcesProvider.get();
  }

  @Override
  public SharedPreferences provideSharedPreference() {
    return provideSharedPreferencesProvider.get();
  }

  @Override
  public Context provideContext() {
    return provideContextProvider.get();
  }

  @Override
  public RxSchedulers provideRxSchedulers() {
    return provideRxSchedulersProvider.get();
  }

  @Override
  public SoapSerializationEnvelope provideSoapSerializationEnvelope() {
    return provideSoapSerializationEnvelopeProvider.get();
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }
}
