// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.splash;

import android.content.SharedPreferences;
import dagger.MembersInjector;
import javax.inject.Provider;
import ru.bashmag.khakimulin.reportmonitor.core.BaseActivity;
import ru.bashmag.khakimulin.reportmonitor.core.BasePresenter;
import ru.bashmag.khakimulin.reportmonitor.screens.splash.mvp.SplashPresenter;
import rx.subscriptions.CompositeSubscription;

public final class SplashActivity_MembersInjector implements MembersInjector<SplashActivity> {
  private final Provider<BasePresenter> presenterProvider;

  private final Provider<CompositeSubscription> subscriptionsProvider;

  private final Provider<SharedPreferences> spProvider;

  private final Provider<SplashPresenter> splashPresenterProvider;

  public SplashActivity_MembersInjector(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<SplashPresenter> splashPresenterProvider) {
    assert presenterProvider != null;
    this.presenterProvider = presenterProvider;
    assert subscriptionsProvider != null;
    this.subscriptionsProvider = subscriptionsProvider;
    assert spProvider != null;
    this.spProvider = spProvider;
    assert splashPresenterProvider != null;
    this.splashPresenterProvider = splashPresenterProvider;
  }

  public static MembersInjector<SplashActivity> create(
      Provider<BasePresenter> presenterProvider,
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<SharedPreferences> spProvider,
      Provider<SplashPresenter> splashPresenterProvider) {
    return new SplashActivity_MembersInjector(
        presenterProvider, subscriptionsProvider, spProvider, splashPresenterProvider);
  }

  @Override
  public void injectMembers(SplashActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    ((BaseActivity) instance).presenter = presenterProvider.get();
    ((BaseActivity) instance).subscriptions = subscriptionsProvider.get();
    ((BaseActivity) instance).sp = spProvider.get();
    instance.splashPresenter = splashPresenterProvider.get();
  }

  public static void injectSplashPresenter(
      SplashActivity instance, Provider<SplashPresenter> splashPresenterProvider) {
    instance.splashPresenter = splashPresenterProvider.get();
  }
}
