// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package ru.bashmag.khakimulin.reportmonitor.screens.reports.sales.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import ru.bashmag.khakimulin.reportmonitor.core.TimeoutHttpTransport;
import ru.bashmag.khakimulin.reportmonitor.screens.reports.sales.mvp.SalesModel;

public final class SalesModule_ProvideModelFactory implements Factory<SalesModel> {
  private final SalesModule module;

  private final Provider<TimeoutHttpTransport> httpTransportSEProvider;

  private final Provider<SoapSerializationEnvelope> envelopeProvider;

  private final Provider<SoapObject> soapObjectProvider;

  public SalesModule_ProvideModelFactory(
      SalesModule module,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider,
      Provider<SoapObject> soapObjectProvider) {
    assert module != null;
    this.module = module;
    assert httpTransportSEProvider != null;
    this.httpTransportSEProvider = httpTransportSEProvider;
    assert envelopeProvider != null;
    this.envelopeProvider = envelopeProvider;
    assert soapObjectProvider != null;
    this.soapObjectProvider = soapObjectProvider;
  }

  @Override
  public SalesModel get() {
    return Preconditions.checkNotNull(
        module.provideModel(
            httpTransportSEProvider.get(), envelopeProvider.get(), soapObjectProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<SalesModel> create(
      SalesModule module,
      Provider<TimeoutHttpTransport> httpTransportSEProvider,
      Provider<SoapSerializationEnvelope> envelopeProvider,
      Provider<SoapObject> soapObjectProvider) {
    return new SalesModule_ProvideModelFactory(
        module, httpTransportSEProvider, envelopeProvider, soapObjectProvider);
  }

  /**
   * Proxies {@link SalesModule#provideModel(TimeoutHttpTransport, SoapSerializationEnvelope,
   * SoapObject)}.
   */
  public static SalesModel proxyProvideModel(
      SalesModule instance,
      TimeoutHttpTransport httpTransportSE,
      SoapSerializationEnvelope envelope,
      SoapObject soapObject) {
    return instance.provideModel(httpTransportSE, envelope, soapObject);
  }
}
